//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once
#include <wmistr.h>
#include <evntrace.h>
#include "evntprov.h"
//
//  Initial Defs
//
#if !defined(ETW_INLINE)
#define ETW_INLINE DECLSPEC_NOINLINE __inline
#endif

#if defined(__cplusplus)
extern "C" {
#endif

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION
#if  !defined(McGenDebug)
#define McGenDebug(a,b)
#endif 


#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level; 
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;

}
#endif

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{

    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);

}
#endif


//
// EnableCheckMacro
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled &&  McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Vista.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider. 

    ControlCode - The parameter indicates whether the provider 
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to 
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category 
                      of events that the provider writes. 

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider 
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;
 
        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif
   
    return;
}

#endif
#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION
//+
// Provider ASYNCCOM Event Count 9
//+
EXTERN_C __declspec(selectany) const GUID ASYNCCOM_PROVIDER = {0x69cd60e3, 0x430f, 0x4da4, {0xb1, 0xb3, 0xe3, 0xbd, 0xaf, 0x94, 0x58, 0x75}};

//
// Channel
//
#define ASYNCCOM_ANALYTIC 0x10
#define ASYNCCOM_OPERATIONAL 0x11

//
// Opcodes
//
#define ASYNCCOM_DEVICE_ADD 0xa
#define ASYNCCOM_FAIL 0xb

//
// Tasks
//
#define ASYNCCOM_DEVICE_INIT 0x1
EXTERN_C __declspec(selectany) const GUID deviceInitId = {0x872c3c43, 0x6899, 0x4f1d, {0x89, 0xb8, 0x51, 0xa8, 0x2f, 0x6d, 0xb6, 0x57}};
#define ASYNCCOM_READ 0x2
EXTERN_C __declspec(selectany) const GUID readId = {0x872c3c45, 0x6899, 0x4f1d, {0x89, 0xb8, 0x51, 0xa8, 0x2f, 0x6d, 0xb6, 0x57}};
#define ASYNCCOM_WRITE 0x3
EXTERN_C __declspec(selectany) const GUID writeId = {0x872c3c46, 0x6899, 0x4f1d, {0x89, 0xb8, 0x51, 0xa8, 0x2f, 0x6d, 0xb6, 0x57}};
//
// Keyword
//
#define ASYNCCOM_DEVICE_INFO_KEYWORD 0x10
#define ASYNCCOM_READ_WRITE_KEYWORD 0x40

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadStart = {0x1, 0x0, 0x10, 0x4, 0x1, 0x2, 0x8000000000000040};
#define ReadStart_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadStop = {0x2, 0x0, 0x10, 0x4, 0x2, 0x2, 0x8000000000000040};
#define ReadStop_value 0x2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadFail = {0x3, 0x0, 0x10, 0x2, 0xb, 0x2, 0x8000000000000040};
#define ReadFail_value 0x3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WriteStart = {0x4, 0x0, 0x10, 0x4, 0x1, 0x3, 0x8000000000000040};
#define WriteStart_value 0x4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WriteStop = {0x5, 0x0, 0x10, 0x4, 0x2, 0x3, 0x8000000000000040};
#define WriteStop_value 0x5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR WriteFail = {0x6, 0x0, 0x10, 0x2, 0xb, 0x3, 0x8000000000000040};
#define WriteFail_value 0x6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR FailAddDevice = {0x64, 0x0, 0x11, 0x2, 0xa, 0x1, 0x4000000000000010};
#define FailAddDevice_value 0x64
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR DeviceReenumerated = {0x65, 0x0, 0x11, 0x0, 0x1, 0x1, 0x4000000000000010};
#define DeviceReenumerated_value 0x65
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR SelectConfigFailure = {0x66, 0x0, 0x11, 0x2, 0xb, 0x1, 0x4000000000000010};
#define SelectConfigFailure_value 0x66

//
// Note on Generate Code from Manifest Windows Vista and above
//
//Structures :  are handled as a size and pointer pairs. The macro for the event will have an extra 
//parameter for the size in bytes of the structure. Make sure that your structures have no extra padding.
//
//Strings: There are several cases that can be described in the manifest. For array of variable length 
//strings, the generated code will take the count of characters for the whole array as an input parameter. 
//
//SID No support for array of SIDs, the macro will take a pointer to the SID and use appropriate 
//GetLengthSid function to get the length.
//

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Globals 
//


//
// Event Enablement Bits
//

EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG ASYNCCOMEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG ASYNCCOMKeywords[4] = {0x8000000000000040, 0x8000000000000040, 0x4000000000000010, 0x4000000000000010};
EXTERN_C __declspec(selectany) const UCHAR ASYNCCOMLevels[4] = {4, 2, 2, 0};
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT ASYNCCOM_PROVIDER_Context = {0, 0, 0, 0, 0, 0, 0, 0, 4, ASYNCCOMEnableBits, ASYNCCOMKeywords, ASYNCCOMLevels};

EXTERN_C __declspec(selectany) REGHANDLE ASYNCCOMHandle = (REGHANDLE)0;

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ PETWENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function register the provider with ETW KERNEL mode.

Arguments:
    ProviderId - Provider Id to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to Registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return STATUS_SUCCESS;
    }

    Error = EtwRegister( ProviderId, EnableCallback, CallbackContext, RegHandle); 

    return Error;
}


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW KERNEL mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If Provider has not register RegHandle = NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return STATUS_SUCCESS;
    }

    Error = EtwUnregister(*RegHandle); 
    *RegHandle = (REGHANDLE)0;
    
    return Error;
}
#endif
//
// Register with ETW Vista +
//
#ifndef EventRegisterASYNCCOM
#define EventRegisterASYNCCOM() McGenEventRegister(&ASYNCCOM_PROVIDER, McGenControlCallbackV2, &ASYNCCOM_PROVIDER_Context, &ASYNCCOMHandle) 
#endif

//
// UnRegister with ETW
//
#ifndef EventUnregisterASYNCCOM
#define EventUnregisterASYNCCOM() McGenEventUnregister(&ASYNCCOMHandle) 
#endif

//
// Enablement check macro for ReadStart
//

#define EventEnabledReadStart() ((ASYNCCOMEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ReadStart
//
#define EventWriteReadStart(Activity, Device, Length)\
        EventEnabledReadStart() ?\
        Template_pq(ASYNCCOMHandle, &ReadStart, Activity, Device, Length)\
        : STATUS_SUCCESS\

//
// Enablement check macro for ReadStop
//

#define EventEnabledReadStop() ((ASYNCCOMEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ReadStop
//
#define EventWriteReadStop(Activity, Device, Length, NTStatus, UsbdStatus)\
        EventEnabledReadStop() ?\
        Template_pqqq(ASYNCCOMHandle, &ReadStop, Activity, Device, Length, NTStatus, UsbdStatus)\
        : STATUS_SUCCESS\

//
// Enablement check macro for ReadFail
//

#define EventEnabledReadFail() ((ASYNCCOMEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for ReadFail
//
#define EventWriteReadFail(Activity, Device, NTStatus)\
        EventEnabledReadFail() ?\
        Template_pq(ASYNCCOMHandle, &ReadFail, Activity, Device, NTStatus)\
        : STATUS_SUCCESS\

//
// Enablement check macro for WriteStart
//

#define EventEnabledWriteStart() ((ASYNCCOMEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for WriteStart
//
#define EventWriteWriteStart(Activity, Device, Length)\
        EventEnabledWriteStart() ?\
        Template_pq(ASYNCCOMHandle, &WriteStart, Activity, Device, Length)\
        : STATUS_SUCCESS\

//
// Enablement check macro for WriteStop
//

#define EventEnabledWriteStop() ((ASYNCCOMEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for WriteStop
//
#define EventWriteWriteStop(Activity, Device, Length, NTStatus, UsbdStatus)\
        EventEnabledWriteStop() ?\
        Template_pqqq(ASYNCCOMHandle, &WriteStop, Activity, Device, Length, NTStatus, UsbdStatus)\
        : STATUS_SUCCESS\

//
// Enablement check macro for WriteFail
//

#define EventEnabledWriteFail() ((ASYNCCOMEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for WriteFail
//
#define EventWriteWriteFail(Activity, Device, NTStatus)\
        EventEnabledWriteFail() ?\
        Template_pq(ASYNCCOMHandle, &WriteFail, Activity, Device, NTStatus)\
        : STATUS_SUCCESS\

//
// Enablement check macro for FailAddDevice
//

#define EventEnabledFailAddDevice() ((ASYNCCOMEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for FailAddDevice
//
#define EventWriteFailAddDevice(Activity, FriendlyName, Location, NTStatus)\
        EventEnabledFailAddDevice() ?\
        Template_zzq(ASYNCCOMHandle, &FailAddDevice, Activity, FriendlyName, Location, NTStatus)\
        : STATUS_SUCCESS\

//
// Enablement check macro for DeviceReenumerated
//

#define EventEnabledDeviceReenumerated() ((ASYNCCOMEnableBits[0] & 0x00000008) != 0)

//
// Event Macro for DeviceReenumerated
//
#define EventWriteDeviceReenumerated(Activity, FriendlyName, Location, NTStatus)\
        EventEnabledDeviceReenumerated() ?\
        Template_zzq(ASYNCCOMHandle, &DeviceReenumerated, Activity, FriendlyName, Location, NTStatus)\
        : STATUS_SUCCESS\

//
// Enablement check macro for SelectConfigFailure
//

#define EventEnabledSelectConfigFailure() ((ASYNCCOMEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for SelectConfigFailure
//
#define EventWriteSelectConfigFailure(Activity, FriendlyName, Location, NTStatus)\
        EventEnabledSelectConfigFailure() ?\
        Template_zzq(ASYNCCOMHandle, &SelectConfigFailure, Activity, FriendlyName, Location, NTStatus)\
        : STATUS_SUCCESS\

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION


//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions 
//
//
//Template from manifest : tid_ReadWrite
//
#ifndef Template_pq_def
#define Template_pq_def
ETW_INLINE
ULONG
Template_pq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCGUID Activity,
    _In_opt_ const void *  _Arg0,
    _In_ const unsigned int  _Arg1
    )
{
#define ARGUMENT_COUNT_pq 2

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_pq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    return EtwWrite(RegHandle, Descriptor, Activity, ARGUMENT_COUNT_pq, EventData);
}
#endif

//
//Template from manifest : tid_ReadWriteCompletion
//
#ifndef Template_pqqq_def
#define Template_pqqq_def
ETW_INLINE
ULONG
Template_pqqq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCGUID Activity,
    _In_opt_ const void *  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3
    )
{
#define ARGUMENT_COUNT_pqqq 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_pqqq];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(PVOID)  );

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &_Arg3, sizeof(const unsigned int)  );

    return EtwWrite(RegHandle, Descriptor, Activity, ARGUMENT_COUNT_pqqq, EventData);
}
#endif

//
//Template from manifest : tid_DeviceStatus
//
#ifndef Template_zzq_def
#define Template_zzq_def
ETW_INLINE
ULONG
Template_zzq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCGUID Activity,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_ const unsigned int  _Arg2
    )
{
#define ARGUMENT_COUNT_zzq 3

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzq];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &_Arg2, sizeof(const unsigned int)  );

    return EtwWrite(RegHandle, Descriptor, Activity, ARGUMENT_COUNT_zzq, EventData);
}
#endif

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
};
#endif

#define MSG_ASYNCCOM_DEVICE_INFO_KEYWORD_message 0x10000005L
#define MSG_ASYNCCOM_READ_WRITE_KEYWORD_message 0x10000007L
#define MSG_ASYNCCOM_OPERATIONAL_Name        0x90000001L
#define MSG_ReadStart_EventMessage           0xB0000001L
#define MSG_ReadStop_EventMessage            0xB0000002L
#define MSG_ReadFail_EventMessage            0xB0000003L
#define MSG_WriteStart_EventMessage          0xB0000004L
#define MSG_WriteStop_EventMessage           0xB0000005L
#define MSG_WriteFail_EventMessage           0xB0000006L
#define MSG_DeviceFailAdd_EventMessage       0xB0000064L
#define MSG_DeviceReenumerated_EventMessage  0xB0000065L
#define MSG_SelectConfigFailure_Message      0xB0000066L
